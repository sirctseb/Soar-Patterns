{"tagline":"A collection of useful patterns in Soar","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Soar-patterns","google":"","body":"## Soar-patterns: Patterns for Soar\r\n\r\nSoar-patterns aim to solve common problems in developing Soar agents in a simple and reusable way.\r\n\r\n## How to use these patterns\r\n\r\nEach pattern comes as a full Visual Soar project so it can be easily viewed or modified. Productions can be sourced with `source pattern/pattern.soar`\r\n\r\nSome patterns depend on others. The dependencies are described below\r\n\r\n### Ancestry\r\n\r\nThis project elaborates each state with its ancestors. So if state `S3` has `(S3 ^superstate S2)` and `S2` has `(S2 ^superstate S1)`, then `S3` will be elaborated to have `(S3 ^ancestor S2 ^ancestor S1)`, and `S2` will have `(S2 ^ancestor S1)`. This allows productions to easily test any state in the superstate chain.\r\n\r\n##### To use:  \r\nSimply test `(<s> ^ancestor <ancestor>)` to match any ancestor of a state\r\n\r\n### Init  \r\n_Requires Ancestry_\r\n\r\nInit.soar is a pattern to easily implement simple or complex initialization procedures.  \r\nA required `init` subgoal is proposed when the top state has no name. Arbitrary initialization rules and operators can be defined within the `init` subgoal. An ending operator is proposed in a state no-change substate of init, so that it only fires after there are no more initialization operators. The ending operator application adds a name to the top-state, which will retract the `init` subgoal.\r\n\r\n##### To use:  \r\n1. Implement initialization operators which test `(state <s> ^name init)`\r\n2. Elaborate the proposed `end-init` operator with the name you want the top-state to have after initialization is complete. e.g.:\r\n\r\n```\r\n# declare state name\r\nsp declare*state*name {\r\n   (state <s> ^operator <o> +)\r\n   (<o> ^name end-init)\r\n-->\r\n   (<o> ^state-name my-state-name)\r\n}\r\n```\r\n\r\n### Procedural\r\n\r\nProcedural.soar is a patter to easily define operators that are selected and applied in sequence\r\n\r\n##### To use:\r\n1. Propose an operator with the attribute `(<o> ^procedure procedure-name)`\r\n2. Do not define application rules for the operator.\r\n3. Define operators which should fire in sequence within the resulting subgoal. Each operator should have `(<o> ^sequence int)`\r\n4. When the original procedure operator is selected, a subgoal is created, and the operators will be selected and applied in increasing order of sequence numbers."}